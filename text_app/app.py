import streamlit as st
from transformers import pipeline
from transformers import AutoTokenizer, AutoModelForTokenClassification


tokenizer = AutoTokenizer.from_pretrained("dslim/bert-base-NER")
model = AutoModelForTokenClassification.from_pretrained("dslim/bert-base-NER")



@st.cache_resource
def get_ner_pipeline():
    return pipeline(
        task="ner",
        model=model,
        tokenizer=tokenizer,
        grouped_entities=True,
        device=-1,  # Use CPU
    )

def main():
    st.set_page_config(page_title="NER App", layout="centered")
    st.title("üß† –ú”ô—Ç—ñ–Ω–Ω–µ–Ω –ê—Ç–∞—É–ª–∞—Ä–¥—ã –ê–Ω—ã“õ—Ç–∞—É (NER)")
    
    text = st.text_area("–ú”ô—Ç—ñ–Ω–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:", height=200, placeholder="“ö–∞—Å—ã–º-–ñ–æ–º–∞—Ä—Ç –ö–µ–º–µ–ª“±–ª—ã –¢–æ“õ–∞–µ–≤...")
    st.button("–ê–Ω—ã“õ—Ç–∞—É", key="ner-button")
    
    if text:
        with st.spinner("–ê–Ω—ã“õ—Ç–∞–ø –∂–∞—Ç—ã—Ä–º—ã–∑..."):
            ner_pipeline = get_ner_pipeline()
            results = ner_pipeline(text)
        
        st.subheader("üîç –¢–∞–±—ã–ª“ì–∞–Ω –∞—Ç–∞—É–ª–∞—Ä:")
        for entity in results:
            st.markdown(f"‚Ä¢ **–°”©–∑:** `{entity['word']}`  \n  **–¢“Ø—Ä—ñ:** `{entity['entity_group']}`  \n  **–î”ô–ª–¥—ñ–∫:** `{entity['score']:.2f}`")

if __name__ == "__main__":
    main()
